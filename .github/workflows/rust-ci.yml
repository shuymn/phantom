name: Rust CI

on:
  push:
    branches: [ main, rust-migration ]
    paths:
      - 'rust/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main, rust-migration ]
    paths:
      - 'rust/**'
      - '.github/workflows/rust-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

defaults:
  run:
    working-directory: ./rust

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - 1.75.0  # MSRV (Minimum Supported Rust Version)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup toolchain install ${{ matrix.rust }} --component rustfmt,clippy
          rustup default ${{ matrix.rust }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux kitty-terminfo

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Run cargo check
        run: cargo check --all-features

      - name: Run cargo test
        run: cargo test --all-features

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --all-features -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup toolchain install stable
          rustup default stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Generate coverage report with octocov
        uses: k1LoW/octocov-action@v1
        with:
          config: |
            coverage:
              paths:
                - ./lcov.info
              target: 55%
            comment:
              if: is_pull_request
            report:
              if: is_default_branch
              datastores:
                - artifact://${GITHUB_REPOSITORY}
            diff:
              datastores:
                - artifact://${GITHUB_REPOSITORY}

  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: phantom-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: phantom-linux-aarch64
            use_cross: true
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: phantom-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: phantom-macos-aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup target add ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools
        if: matrix.use_cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Strip binary (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.use_cross }}" != "true" ]; then
            strip target/${{ matrix.target }}/release/phantom
          fi

      - name: Strip binary (macOS)
        if: runner.os == 'macOS'
        run: strip target/${{ matrix.target }}/release/phantom

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.artifact_name }}.tar.gz phantom
          cd ../../../
          shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            rust/${{ matrix.artifact_name }}.tar.gz
            rust/${{ matrix.artifact_name }}.tar.gz.sha256

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MSRV toolchain
        run: |
          rustup toolchain install 1.75.0
          rustup default 1.75.0

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-msrv-
            ${{ runner.os }}-cargo-

      - name: Check MSRV
        run: cargo check --all-features

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit