name: Rust CI

on:
  push:
    branches: [ main, rust-migration ]
    paths:
      - 'rust/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main, rust-migration ]
    paths:
      - 'rust/**'
      - '.github/workflows/rust-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

defaults:
  run:
    working-directory: ./rust

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
          - 1.75.0  # MSRV (Minimum Supported Rust Version)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./rust -> target

      - name: Run cargo check
        run: cargo check --all-features

      - name: Run cargo test
        run: cargo test --all-features

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --all-features -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./rust -> target

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run cargo-tarpaulin
        run: cargo tarpaulin --out xml --exclude-files 'tests/*' --exclude-files 'src/bin/*'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./rust/cobertura.xml
          flags: rust
          fail_ci_if_error: false

  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: phantom-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: phantom-linux-aarch64
            use_cross: true
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: phantom-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: phantom-macos-aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./rust -> target

      - name: Install cross-compilation tools
        if: matrix.use_cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Strip binary (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.use_cross }}" != "true" ]; then
            strip target/${{ matrix.target }}/release/phantom
          fi

      - name: Strip binary (macOS)
        if: runner.os == 'macOS'
        run: strip target/${{ matrix.target }}/release/phantom

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.artifact_name }}.tar.gz phantom
          cd ../../../
          shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            rust/${{ matrix.artifact_name }}.tar.gz
            rust/${{ matrix.artifact_name }}.tar.gz.sha256

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.75.0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./rust -> target

      - name: Check MSRV
        run: cargo check --all-features

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run cargo-audit
        uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ./rust